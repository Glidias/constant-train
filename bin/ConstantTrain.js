// Generated by Haxe 3.4.0
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var boot = new haxevx_vuex_core_VxBoot();
	var gs = new cstrain_vuex_store_GameStore(new cstrain_rules_TestGame());
	var store = boot.startStore(gs);
	boot.startVueWithRootComponent("#app",new cstrain_vuex_components_GameView());
	haxevx_vuex_core_VxBoot.notifyStarted();
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var cstrain_core_Card = function(op,value,isVar,virtualRight) {
	if(isVar == null) {
		isVar = false;
	}
	this.operator = op;
	this.value = value;
	this.isVar = isVar;
	this.virtualRight = virtualRight;
};
cstrain_core_Card.__name__ = true;
cstrain_core_Card.isIncreasingMagnitude = function(op) {
	return (op & 1) != 0;
};
cstrain_core_Card.canOperate = function(op) {
	return op <= 3;
};
cstrain_core_Card.stringifyOp = function(op) {
	if(op == 0) {
		return "+";
	} else if(op == 1) {
		return "-";
	} else if(op == 2) {
		return "*";
	} else if(op == 3) {
		return "/";
	} else if(op == 4) {
		return "=";
	} else {
		return "?";
	}
};
cstrain_core_Card.toOperation = function(card) {
	var _g = card.operator;
	switch(_g) {
	case 0:
		return cstrain_core_Operation.ADD(card.value,card.isVar);
	case 1:
		return cstrain_core_Operation.SUBTRACT(card.value,card.isVar);
	case 2:
		return cstrain_core_Operation.MULTIPLY(card.value,card.isVar);
	case 3:
		return cstrain_core_Operation.DIVIDE(card.value,card.isVar);
	case 4:
		return cstrain_core_Operation.EQUAL(card.value,card.isVar);
	default:
		throw new js__$Boot_HaxeError("Card:: toOperation invalid operator:" + card.operator);
	}
};
cstrain_core_Card.getRegularVarCard = function(operator) {
	return new cstrain_core_Card(operator,1,true);
};
cstrain_core_Card.getRegularGuessConstantCard = function(value,value2) {
	return new cstrain_core_Card(4,value,false,new cstrain_core_Card(4,value2,false));
};
cstrain_core_Card.getRegularStartingVarCard = function() {
	return new cstrain_core_Card(0,1,true);
};
var cstrain_core_CardResult = { __ename__ : true, __constructs__ : ["OK","PENALIZE","GUESS_CONSTANT","NOTHING","GAMEOVER_OUTTA_CARDS"] };
cstrain_core_CardResult.OK = ["OK",0];
cstrain_core_CardResult.OK.__enum__ = cstrain_core_CardResult;
cstrain_core_CardResult.PENALIZE = function(penalty) { var $x = ["PENALIZE",1,penalty]; $x.__enum__ = cstrain_core_CardResult; return $x; };
cstrain_core_CardResult.GUESS_CONSTANT = function(card,wildGuess) { var $x = ["GUESS_CONSTANT",2,card,wildGuess]; $x.__enum__ = cstrain_core_CardResult; return $x; };
cstrain_core_CardResult.NOTHING = ["NOTHING",3];
cstrain_core_CardResult.NOTHING.__enum__ = cstrain_core_CardResult;
cstrain_core_CardResult.GAMEOVER_OUTTA_CARDS = ["GAMEOVER_OUTTA_CARDS",4];
cstrain_core_CardResult.GAMEOVER_OUTTA_CARDS.__enum__ = cstrain_core_CardResult;
var cstrain_core_Deck = function() {
	this.cards = [];
};
cstrain_core_Deck.__name__ = true;
cstrain_core_Deck.arrayShuffleFisherYates = function(array) {
	var m = array.length;
	var i;
	var temp;
	while(m != 0) {
		i = Math.random() * m-- | 0;
		temp = array[m];
		array[m] = array[i];
		array[i] = temp;
	}
	return array;
};
cstrain_core_Deck.getCards = function(setMask,operatorMask,constantMask,numTimes) {
	if(numTimes == null) {
		numTimes = 1;
	}
	if(constantMask == null) {
		constantMask = 0;
	}
	var cards = [];
	if(setMask == 0) {
		setMask = 3;
	}
	if(operatorMask == 0) {
		operatorMask = 15;
	}
	if(constantMask == 0) {
		constantMask = 1023;
	}
	if((setMask & 1) != 0) {
		var _g1 = 0;
		var _g = numTimes;
		while(_g1 < _g) {
			var i = _g1++;
			var _g2 = 0;
			while(_g2 < 4) {
				var o = _g2++;
				if((operatorMask & 1 << o) != 0) {
					var _g3 = 0;
					while(_g3 < 10) {
						var i1 = _g3++;
						if((constantMask & 1 << i1) != 0) {
							cards.push(new cstrain_core_Card(o,i1 + 1));
						}
					}
				}
			}
		}
	}
	if((setMask & 2) != 0) {
		var _g11 = 0;
		var _g4 = numTimes;
		while(_g11 < _g4) {
			var i2 = _g11++;
			var _g21 = 0;
			while(_g21 < 4) {
				var o1 = _g21++;
				if((operatorMask & 1 << o1) != 0) {
					cards.push(new cstrain_core_Card(o1,1,true));
				}
			}
		}
	}
	return cards;
};
cstrain_core_Deck.prototype = {
	shuffle: function() {
		cstrain_core_Deck.arrayShuffleFisherYates(this.cards);
	}
	,aimRandomCard: function() {
		return this.cards[Math.random() * this.cards.length | 0];
	}
	,popCard: function() {
		return this.cards.pop();
	}
	,addCard: function(card) {
		this.cards.push(card);
	}
	,addCardUnderneath: function(card) {
		this.cards.unshift(card);
		return;
	}
	,addCards: function(cards,placeOnTop) {
		if(placeOnTop == null) {
			placeOnTop = true;
		}
		if(placeOnTop) {
			this.cards = this.cards.concat(cards);
		} else {
			this.cards = cards.concat(this.cards);
		}
	}
};
var cstrain_core_IRules = function() { };
cstrain_core_IRules.__name__ = true;
var cstrain_core_Operation = { __ename__ : true, __constructs__ : ["ADD","SUBTRACT","MULTIPLY","DIVIDE","EQUAL"] };
cstrain_core_Operation.ADD = function(val,varSuffix) { var $x = ["ADD",0,val,varSuffix]; $x.__enum__ = cstrain_core_Operation; return $x; };
cstrain_core_Operation.SUBTRACT = function(val,varSuffix) { var $x = ["SUBTRACT",1,val,varSuffix]; $x.__enum__ = cstrain_core_Operation; return $x; };
cstrain_core_Operation.MULTIPLY = function(val,varSuffix) { var $x = ["MULTIPLY",2,val,varSuffix]; $x.__enum__ = cstrain_core_Operation; return $x; };
cstrain_core_Operation.DIVIDE = function(val,varSuffix) { var $x = ["DIVIDE",3,val,varSuffix]; $x.__enum__ = cstrain_core_Operation; return $x; };
cstrain_core_Operation.EQUAL = function(val,varSuffix) { var $x = ["EQUAL",4,val,varSuffix]; $x.__enum__ = cstrain_core_Operation; return $x; };
var cstrain_core_PenaltyDesc = { __ename__ : true, __constructs__ : ["LOST_IN_TRANSIT","MISSED_STOP","WRONG_CONSTANT","FURTHER_GUESS","CLOSER_GUESS"] };
cstrain_core_PenaltyDesc.LOST_IN_TRANSIT = ["LOST_IN_TRANSIT",0];
cstrain_core_PenaltyDesc.LOST_IN_TRANSIT.__enum__ = cstrain_core_PenaltyDesc;
cstrain_core_PenaltyDesc.MISSED_STOP = ["MISSED_STOP",1];
cstrain_core_PenaltyDesc.MISSED_STOP.__enum__ = cstrain_core_PenaltyDesc;
cstrain_core_PenaltyDesc.WRONG_CONSTANT = ["WRONG_CONSTANT",2];
cstrain_core_PenaltyDesc.WRONG_CONSTANT.__enum__ = cstrain_core_PenaltyDesc;
cstrain_core_PenaltyDesc.FURTHER_GUESS = function(answerHigher) { var $x = ["FURTHER_GUESS",3,answerHigher]; $x.__enum__ = cstrain_core_PenaltyDesc; return $x; };
cstrain_core_PenaltyDesc.CLOSER_GUESS = function(answerHigher) { var $x = ["CLOSER_GUESS",4,answerHigher]; $x.__enum__ = cstrain_core_PenaltyDesc; return $x; };
var cstrain_core_Polynomial = function() {
	this.coefs = [0];
};
cstrain_core_Polynomial.__name__ = true;
cstrain_core_Polynomial.floatToStringPrecision = function(n,prec) {
	n *= Math.pow(10,prec);
	return Std.string(Math.round(n) / Math.pow(10,prec));
};
cstrain_core_Polynomial.getSign = function(co) {
	if(co != 0) {
		if(co < 0) {
			return "";
		} else {
			return "+";
		}
	} else {
		return "";
	}
};
cstrain_core_Polynomial.getRepresentation = function(co,level,varLabel) {
	if(co != 0) {
		return (co != 1 || level < 1 ? cstrain_core_Polynomial.floatToStringPrecision(co,2) + "" : "") + (level >= 1 ? varLabel : "") + (level >= 2 ? "<sup>" + level + "</sup>" : "");
	} else {
		return "";
	}
};
cstrain_core_Polynomial.precision = function(co) {
	return cstrain_core_Polynomial.floatToStringPrecision(co,2);
};
cstrain_core_Polynomial.PrintOut = function(poly,varLabel) {
	var co = poly.coefs[0];
	var co1 = poly.coefs[0];
	var arr = co1 != 0 ? (co1 != 1 || true ? cstrain_core_Polynomial.floatToStringPrecision(co1,2) + "" : "") + "" + "" : "";
	var arr1 = [(co != 0 ? co < 0 ? "" : "+" : "") + arr];
	var _g1 = 1;
	var _g = poly.coefs.length;
	while(_g1 < _g) {
		var i = _g1++;
		var co2 = poly.coefs[i];
		var co3 = poly.coefs[i];
		var tmp = co3 != 0 ? (co3 != 1 || i < 1 ? cstrain_core_Polynomial.floatToStringPrecision(co3,2) + "" : "") + (i >= 1 ? varLabel : "") + (i >= 2 ? "<sup>" + i + "</sup>" : "") : "";
		arr1.push((co2 != 0 ? co2 < 0 ? "" : "+" : "") + tmp);
	}
	arr1.reverse();
	if(arr1[0].charAt(0) == "+") {
		arr1[0] = HxOverrides.substr(arr1[0],1,null);
	}
	return arr1.join(" ");
};
cstrain_core_Polynomial.Copy = function(poly) {
	var me = new cstrain_core_Polynomial();
	me.coefs = poly.coefs.concat([]);
	return me;
};
cstrain_core_Polynomial.prototype = {
	get_isUnknown: function() {
		return this.coefs.length > 1;
	}
	,get_constantInteger: function() {
		return this.coefs[0] | 0;
	}
	,get_constantValue: function() {
		return this.coefs[0];
	}
	,calculateValueInt: function(varValue) {
		var sum = 0;
		var _g1 = 0;
		var _g = this.coefs.length;
		while(_g1 < _g) {
			var i = _g1++;
			sum += this.coefs[i] * Math.pow(varValue,1 << i);
		}
		return sum | 0;
	}
	,calculateValueFloat: function(varValue) {
		var sum = 0;
		var _g1 = 0;
		var _g = this.coefs.length;
		while(_g1 < _g) {
			var i = _g1++;
			sum += this.coefs[i] * Math.pow(varValue,1 << i);
		}
		return sum;
	}
	,cleanupPolynomial: function() {
		var i = this.coefs.length;
		while(--i > 0) if(this.coefs[i] != 0) {
			break;
		} else {
			this.coefs.pop();
		}
	}
	,performOperation: function(op) {
		switch(op[1]) {
		case 0:
			var isVar = op[3];
			var value = op[2];
			if(isVar && this.coefs.length < 2) {
				this.coefs.push(0);
			}
			console.log("+:" + value + ", " + (isVar == null ? "null" : "" + isVar));
			this.coefs[isVar ? 1 : 0] += value;
			break;
		case 1:
			var isVar1 = op[3];
			var value1 = op[2];
			if(isVar1 && this.coefs.length < 2) {
				this.coefs.push(0);
			}
			console.log("-:" + value1 + ", " + (isVar1 == null ? "null" : "" + isVar1));
			this.coefs[isVar1 ? 1 : 0] -= value1;
			break;
		case 2:
			var isVar2 = op[3];
			var value2 = op[2];
			if(isVar2) {
				this.coefs.unshift(0);
			}
			console.log("*:" + value2 + ", " + (isVar2 == null ? "null" : "" + isVar2));
			var _g1 = 0;
			var _g = this.coefs.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.coefs[i] *= value2;
			}
			break;
		case 3:
			var isVar3 = op[3];
			var value3 = op[2];
			if(value3 == 0) {
				throw new js__$Boot_HaxeError("Divide by zero error detected!");
			}
			if(isVar3) {
				this.coefs.pop();
			}
			console.log("/:" + value3 + ", " + (isVar3 == null ? "null" : "" + isVar3));
			var _g11 = 0;
			var _g2 = this.coefs.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				this.coefs[i1] /= value3;
			}
			break;
		default:
			console.log("UInaccounted for operation:" + Std.string(op));
		}
		this.cleanupPolynomial();
	}
};
var cstrain_rules_TestGame = function() {
	this.polynomialValueCached = false;
	this.restart();
};
cstrain_rules_TestGame.__name__ = true;
cstrain_rules_TestGame.__interfaces__ = [cstrain_core_IRules];
cstrain_rules_TestGame.prototype = {
	recreateSecret: function() {
		this.secretVarValue = Math.ceil(Math.random() * 10) | 0;
		this.polynomialValueCached = false;
	}
	,getSecretValue: function() {
		if(this.polynomialValueCached) {
			return this.polynomialValue;
		} else {
			return this.polynomialValue = this.polynomial.calculateValueInt(this.secretVarValue);
		}
	}
	,buildDeck: function() {
		this.deck.addCards(cstrain_core_Deck.getCards(1,3,0,1));
		this.deck.addCards(cstrain_core_Deck.getCards(1,12,2,1));
		this.deck.addCards(cstrain_core_Deck.getCards(2,1,0,3));
		this.deck.addCards(cstrain_core_Deck.getCards(2,2,0,4));
		this.deck.addCards(cstrain_core_Deck.getCards(2,12,0,2));
		this.deck.shuffle();
		this.curDeck = this.deck;
		this.curDeckIndex = this.curDeck.cards.length - 1;
		this.thePopupCard = new cstrain_core_Card(0,1,true);
	}
	,getFakeValueOf: function(val) {
		var magnitudeBase = Math.ceil(val / 20) * 40;
		var minBase = Math.ceil(magnitudeBase / 8) | 0;
		if(Math.random() >= .5) {
			return val - minBase - (magnitudeBase * Math.random() | 0) | 0;
		} else {
			return val + minBase + (magnitudeBase * Math.random() | 0) | 0;
		}
	}
	,getCloserValueTo: function(val,from) {
		var amt = val - from;
		from += val >= from ? Math.ceil(Math.random() * amt) | 0 : Math.floor(Math.random() * amt) | 0;
		return from;
	}
	,getFakeValueOfCloserValue: function(val) {
		var magnitudeBase = Math.ceil(val / 20) * 40;
		var minBase = Math.ceil(magnitudeBase / 2) | 0;
		if(Math.random() >= .5) {
			return val - minBase - (magnitudeBase * Math.random() | 0) | 0;
		} else {
			return val + minBase + (magnitudeBase * Math.random() | 0) | 0;
		}
	}
	,getCardResult: function(isSwipeRight) {
		var curCard = this.thePopupCard != null ? this.thePopupCard : this.curDeckIndex >= 0 ? this.curDeck.cards[this.curDeckIndex--] : null;
		if(curCard == null) {
			return cstrain_core_CardResult.GAMEOVER_OUTTA_CARDS;
		}
		this.thePopupCard = null;
		if(curCard.operator <= 3) {
			this.polynomial.performOperation(cstrain_core_Card.toOperation(curCard));
			if(isSwipeRight) {
				if(this.polynomial.coefs.length <= 1) {
					if(Math.random() >= .5) {
						return cstrain_core_CardResult.GUESS_CONSTANT(new cstrain_core_Card(4,this.polynomial.coefs[0] | 0,false,new cstrain_core_Card(4,this.getFakeValueOf(this.polynomial.coefs[0]),false)),false);
					} else {
						return cstrain_core_CardResult.GUESS_CONSTANT(new cstrain_core_Card(4,this.getFakeValueOf(this.polynomial.coefs[0]),false,new cstrain_core_Card(4,this.polynomial.coefs[0] | 0,false)),false);
					}
				} else {
					return cstrain_core_CardResult.PENALIZE({ desc : cstrain_core_PenaltyDesc.LOST_IN_TRANSIT, delayNow : 2});
				}
			} else if(this.polynomial.coefs.length <= 1) {
				return cstrain_core_CardResult.PENALIZE({ desc : cstrain_core_PenaltyDesc.MISSED_STOP, delayNow : 2});
			} else {
				return cstrain_core_CardResult.OK;
			}
		} else if(curCard.operator == 4) {
			var c = !this.wildGuess ? this.polynomial.coefs[0] | 0 : this.polynomialValueCached ? this.polynomialValue : this.polynomialValue = this.polynomial.calculateValueInt(this.secretVarValue);
			var rightIsRight = this.wildGuess ? Math.abs(curCard.virtualRight.value - c) < Math.abs(curCard.value - c) : curCard.virtualRight.value == c;
			var valueChosen = isSwipeRight ? curCard.virtualRight.value : curCard.value;
			this._valueChosen = valueChosen;
			if(isSwipeRight && rightIsRight || !isSwipeRight && !rightIsRight) {
				if(c != valueChosen) {
					if(!this.wildGuess) {
						console.log("Should not happen exception occured mismatch with swipe and correct answre for !wildGuess..");
					}
					return cstrain_core_CardResult.PENALIZE({ desc : cstrain_core_PenaltyDesc.CLOSER_GUESS(c > valueChosen), delayNow : 1});
				} else {
					this.thePopupCard = new cstrain_core_Card(0,1,true);
					this.secretVarValue = Math.ceil(Math.random() * 10) | 0;
					this.polynomialValueCached = false;
					return cstrain_core_CardResult.OK;
				}
			} else if(!this.wildGuess) {
				return cstrain_core_CardResult.PENALIZE({ desc : cstrain_core_PenaltyDesc.WRONG_CONSTANT, delayNow : 1});
			} else {
				return cstrain_core_CardResult.PENALIZE({ delayNow : 2, desc : cstrain_core_PenaltyDesc.FURTHER_GUESS(c > valueChosen)});
			}
		} else {
			var op = curCard.operator;
			console.log("Unaccounted for opreation: " + (op == 0 ? "+" : op == 1 ? "-" : op == 2 ? "*" : op == 3 ? "/" : op == 4 ? "=" : "?"));
		}
		console.log("Exception CardResult.NOTHING detected. Should not happen!");
		return cstrain_core_CardResult.NOTHING;
	}
	,getConstant: function() {
		return this.polynomial.coefs[0] | 0;
	}
	,getPolynomialValue: function(varValue) {
		return this.polynomial.calculateValueInt(varValue);
	}
	,isConstant: function() {
		return this.polynomial.coefs.length <= 1;
	}
	,restart: function() {
		this.deck = new cstrain_core_Deck();
		this.thePopupCard = null;
		this.polynomial = new cstrain_core_Polynomial();
		this.wildGuess = false;
		this.secretVarValue = Math.ceil(Math.random() * 10) | 0;
		this.polynomialValueCached = false;
		this.buildDeck();
	}
	,getAllCards: function() {
		return this.deck.cards;
	}
	,playCard: function(isSwipeRight) {
		var result = this.getCardResult(isSwipeRight);
		switch(result[1]) {
		case 1:
			switch(result[2].desc[1]) {
			case 0:case 1:
				this.wildGuess = true;
				break;
			case 3:case 4:
				var v = this.wildGuess ? this.polynomialValueCached ? this.polynomialValue : this.polynomialValue = this.polynomial.calculateValueInt(this.secretVarValue) : this.polynomial.coefs[0] | 0;
				var to = this.polynomialValueCached ? this.polynomialValue : this.polynomialValue = this.polynomial.calculateValueInt(this.secretVarValue);
				var firstChoice = this.getCloserValueTo(v,this._valueChosen);
				var secondChoice = this.getCloserValueTo(v,this._valueChosen);
				if(secondChoice == firstChoice) {
					secondChoice = this.getFakeValueOfCloserValue(firstChoice);
				}
				this.thePopupCard = new cstrain_core_Card(4,firstChoice,false,new cstrain_core_Card(4,secondChoice,false));
				break;
			default:
			}
			break;
		case 2:
			var wildGuess = result[3];
			var guessConstantCard = result[2];
			this.wildGuess = wildGuess;
			var c = this.polynomial.coefs[0] | 0;
			this.thePopupCard = guessConstantCard;
			break;
		default:
		}
		return result;
	}
	,getTopCard: function() {
		if(this.curDeckIndex >= 0) {
			return this.curDeck.cards[this.curDeckIndex];
		} else {
			return null;
		}
	}
	,getBelowCardCard: function() {
		if(this.curDeckIndex >= 1) {
			return this.curDeck.cards[this.curDeckIndex - 1];
		} else {
			return null;
		}
	}
	,getTopmostCard: function() {
		if(this.thePopupCard != null) {
			return this.thePopupCard;
		} else if(this.curDeckIndex >= 0) {
			return this.curDeck.cards[this.curDeckIndex];
		} else {
			return null;
		}
	}
	,getNextCardBelow: function() {
		if(this.thePopupCard != null) {
			if(this.curDeckIndex >= 0) {
				return this.curDeck.cards[this.curDeckIndex];
			} else {
				return null;
			}
		} else if(this.curDeckIndex >= 1) {
			return this.curDeck.cards[this.curDeckIndex - 1];
		} else {
			return null;
		}
	}
	,getPolynomial: function() {
		return this.polynomial;
	}
};
var haxevx_vuex_core_VComponent = function() {
	this._Init();
};
haxevx_vuex_core_VComponent.__name__ = true;
haxevx_vuex_core_VComponent.__super__ = Object;
haxevx_vuex_core_VComponent.prototype = $extend(Object.prototype,{
	_Init: function() {
	}
	,get__props: function() {
		return this;
	}
	,get__vData: function() {
		return this.$data;
	}
	,PropsData: function() {
		return null;
	}
	,Data: function() {
		return null;
	}
	,Created: function() {
	}
	,BeforeCreate: function() {
	}
	,BeforeDestroy: function() {
	}
	,Destroy: function() {
	}
	,BeforeMount: function() {
	}
	,Mounted: function() {
	}
	,BeforeUpdate: function() {
	}
	,Updated: function() {
	}
	,Activated: function() {
	}
	,Deactivated: function() {
	}
	,El: function() {
		return null;
	}
	,Render: function(c) {
		return null;
	}
	,Template: function() {
		return null;
	}
	,Components: function() {
		return null;
	}
	,GetDefaultPropSettings: function() {
		return null;
	}
	,GetDefaultPropValues: function() {
		return null;
	}
});
var haxevx_vuex_core_VxComponent = function() {
	haxevx_vuex_core_VComponent.call(this);
};
haxevx_vuex_core_VxComponent.__name__ = true;
haxevx_vuex_core_VxComponent.__super__ = haxevx_vuex_core_VComponent;
haxevx_vuex_core_VxComponent.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	get_store: function() {
		return this.$store;
	}
});
var cstrain_vuex_components_CardView = function() {
	haxevx_vuex_core_VxComponent.call(this);
};
cstrain_vuex_components_CardView.__name__ = true;
cstrain_vuex_components_CardView.__super__ = haxevx_vuex_core_VxComponent;
cstrain_vuex_components_CardView.prototype = $extend(haxevx_vuex_core_VxComponent.prototype,{
	swipe: function(isRight) {
		this.$store.dispatch("cstrain_vuex_game_GameActions|swipe",isRight);
	}
	,Template: function() {
		return "\r\n\t\t\t<div class=\"cardview\">\r\n\t\t\t\t<h3>Swipe</h3>\r\n\t\t\t\t<div class=\"card\" v-if=\"currentCard\">\r\n\t\t\t\t\t{{ cardCopy }} \r\n\t\t\t\t\t<br/>\r\n\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t\t<button v-on:click=\"swipe(false)\">Left</button>\r\n\t\t\t\t<button v-on:click=\"swipe(true)\">Right</button>\r\n\t\t\t</div>\r\n\t\t";
	}
	,get_cardCopy: function() {
		var op = this.currentCard.operator;
		return (op == 0 ? "+" : op == 1 ? "-" : op == 2 ? "*" : op == 3 ? "/" : op == 4 ? "=" : "?") + (this.currentCard.isVar ? "n" : this.currentCard.value + "");
	}
	,_Init: function() {
		var cls = cstrain_vuex_components_CardView;
		var clsP = cls.prototype;
		this.template = this.Template();
		this.computed = { cardCopy : clsP.get_cardCopy};
		this.methods = { swipe : clsP.swipe, get_cardCopy : clsP.get_cardCopy};
		this.props = { currentCard : { type : Object}};
	}
});
var cstrain_vuex_components_GameView = function() {
	haxevx_vuex_core_VxComponent.call(this);
};
cstrain_vuex_components_GameView.__name__ = true;
cstrain_vuex_components_GameView.__super__ = haxevx_vuex_core_VxComponent;
cstrain_vuex_components_GameView.prototype = $extend(haxevx_vuex_core_VxComponent.prototype,{
	Components: function() {
		var _m_ = { };
		_m_["CardView"] = new cstrain_vuex_components_CardView();
		return _m_;
	}
	,Created: function() {
		this.$store.commit("cstrain_vuex_game_GameMutator|resume");
	}
	,toggleExpression: function() {
		this.$store.commit("cstrain_vuex_game_GameMutator|showOrHideExpression");
	}
	,Template: function() {
		return "\r\n\t\t\t<div class=\"gameview\">\r\n\t\t\t\tThe Constant Train :: Polynomial Express\r\n\t\t\t\t<hr/>\r\n\t\t\t\t<" + "CardView" + " :currentCard=\"currentCard\"></" + "CardView" + ">\r\n\t\t\t\t<div class=\"traceResult\" v-if=\"cardResult\">\r\n\t\t\t\t\t<p>{{ cardResult }}</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"xpression\" style=\"font-style:italic\" v-html=\"polyexpression\"></div>\r\n\t\t\t\t<br/>\r\n\t\t\t\t<button class=\"cheat\" v-on:click=\"toggleExpression()\">{{ toggleExprLabel }} expression</button>\r\n\t\t\t</div>\r\n\t\t";
	}
	,get_currentCard: function() {
		return this.$store.state.game.topCard;
	}
	,get_cardResult: function() {
		return this.$store.state.game.cardResult;
	}
	,get_toggleExprLabel: function() {
		if(this.$store.state.game.showExpression) {
			return "Hide";
		} else {
			return "Show";
		}
	}
	,get_polyexpression: function() {
		return this.$store.game.gameGetters.get_polynomialExpr();
	}
	,_Init: function() {
		var cls = cstrain_vuex_components_GameView;
		var clsP = cls.prototype;
		this.components = this.Components();
		this.created = clsP.Created;
		this.template = this.Template();
		this.computed = { currentCard : clsP.get_currentCard, cardResult : clsP.get_cardResult, polyexpression : clsP.get_polyexpression, toggleExprLabel : clsP.get_toggleExprLabel};
		this.methods = { toggleExpression : clsP.toggleExpression, get_currentCard : clsP.get_currentCard, get_cardResult : clsP.get_cardResult, get_toggleExprLabel : clsP.get_toggleExprLabel, get_polyexpression : clsP.get_polyexpression};
	}
});
var haxevx_vuex_core_IAction = function() { };
haxevx_vuex_core_IAction.__name__ = true;
var cstrain_vuex_game_GameActions = function() {
};
cstrain_vuex_game_GameActions.__name__ = true;
cstrain_vuex_game_GameActions.prototype = {
	swipe: function(context,isRight) {
		var result = context.state._rules.playCard(isRight);
		switch(result[1]) {
		case 0:
			context.commit("cstrain_vuex_game_GameMutator|resume");
			break;
		case 1:
			var penalty = result[2];
			if(penalty.delayNow != null) {
				context.commit("cstrain_vuex_game_GameMutator|setDelay",penalty.delayNow);
			}
			context.commit("cstrain_vuex_game_GameMutator|resume");
			break;
		case 2:
			var wildGuessing = result[3];
			var guessCard = result[2];
			context.commit("cstrain_vuex_game_GameMutator|setPopupCard");
			context.commit("cstrain_vuex_game_GameMutator|resume");
			break;
		default:
			console.log("Uncaught case: " + Std.string(result));
		}
		context.commit("cstrain_vuex_game_GameMutator|traceCardResult",result);
	}
	,_SetInto: function(d,ns) {
		var cls = cstrain_vuex_game_GameActions;
		var clsP = cls.prototype;
		d[ns + "cstrain_vuex_game_GameActions|swipe"] = clsP.swipe;
	}
};
var haxevx_vuex_core_IGetters = function() { };
haxevx_vuex_core_IGetters.__name__ = true;
var cstrain_vuex_game_GameGetters = function() {
};
cstrain_vuex_game_GameGetters.__name__ = true;
cstrain_vuex_game_GameGetters.Get_polynomialExpr = function(state) {
	if(state.showExpression) {
		if(state.polynomial != null) {
			return cstrain_core_Polynomial.PrintOut(state.polynomial,"n");
		} else {
			return "..";
		}
	} else {
		return "";
	}
};
cstrain_vuex_game_GameGetters.prototype = {
	get_polynomialExpr: function() {
		return this._stg[this._ + "polynomialExpr_cstrain_vuex_game_GameGetters"];
	}
	,_SetInto: function(d,ns) {
		this._ = ns;
		haxevx_vuex_core_ModuleStack.stack.push(this);
		var cls = cstrain_vuex_game_GameGetters;
		d[ns + "polynomialExpr_cstrain_vuex_game_GameGetters"] = cls.Get_polynomialExpr;
	}
	,_InjNative: function(g) {
		this._stg = g;
	}
};
var haxevx_vuex_core_IModule = function() { };
haxevx_vuex_core_IModule.__name__ = true;
var haxevx_vuex_core_VModule = function() { };
haxevx_vuex_core_VModule.__name__ = true;
haxevx_vuex_core_VModule.__interfaces__ = [haxevx_vuex_core_IModule];
haxevx_vuex_core_VModule.prototype = {
	_InjNative: function(g) {
		this._stg = g;
	}
};
var cstrain_vuex_game_GameModule = function(rules) {
	this.rules = rules;
	this.state = new cstrain_vuex_game_GameState(rules);
};
cstrain_vuex_game_GameModule.__name__ = true;
cstrain_vuex_game_GameModule.__super__ = haxevx_vuex_core_VModule;
cstrain_vuex_game_GameModule.prototype = $extend(haxevx_vuex_core_VModule.prototype,{
	_InjNative: function(g) {
		haxevx_vuex_core_VModule.prototype._InjNative.call(this,g);
		this.state._rules = this.rules;
	}
	,_Init: function(ns) {
		this._ = ns;
		haxevx_vuex_core_ModuleStack.stack.push(this);
		if(this.state != null) {
			this.state._ = ns;
		} else {
			this.state = { _ : ns};
		}
		var useNS = ns;
		var cls = cstrain_vuex_game_GameModule;
		var clsP = cls.prototype;
		var key;
		var d;
		d = { };
		this.getters = d;
		this.gameGetters = new cstrain_vuex_game_GameGetters();
		this.gameGetters._SetInto(d,useNS);
		d = { };
		this.mutations = d;
		new cstrain_vuex_game_GameMutator()._SetInto(d,"");
		d = { };
		this.actions = d;
		new cstrain_vuex_game_GameActions()._SetInto(d,"");
	}
});
var haxevx_vuex_core_IMutator = function() { };
haxevx_vuex_core_IMutator.__name__ = true;
var cstrain_vuex_game_GameMutator = function() {
};
cstrain_vuex_game_GameMutator.__name__ = true;
cstrain_vuex_game_GameMutator.Restart = function(g) {
	g._rules.restart();
	g.cards = g._rules.getAllCards();
};
cstrain_vuex_game_GameMutator.prototype = {
	restart: function(g) {
		cstrain_vuex_game_GameMutator.Restart(g);
	}
	,setPopupCard: function(state,isPopup) {
		if(isPopup == null) {
			isPopup = true;
		}
		state.isPopup = isPopup;
	}
	,setDelay: function(state,delay) {
		state.delayTimeLeft = delay;
	}
	,traceCardResult: function(state,result) {
		state.cardResult = result;
	}
	,resume: function(state) {
		state.topCard = state._rules.getTopmostCard();
		state.polynomial = cstrain_core_Polynomial.Copy(state._rules.getPolynomial());
	}
	,showOrHideExpression: function(state,showExpression) {
		if(showExpression == null) {
			showExpression = !state.showExpression;
		}
		state.showExpression = showExpression;
	}
	,_SetInto: function(d,ns) {
		var cls = cstrain_vuex_game_GameMutator;
		var clsP = cls.prototype;
		d[ns + "cstrain_vuex_game_GameMutator|restart"] = clsP.restart;
		d[ns + "cstrain_vuex_game_GameMutator|setPopupCard"] = clsP.setPopupCard;
		d[ns + "cstrain_vuex_game_GameMutator|setDelay"] = clsP.setDelay;
		d[ns + "cstrain_vuex_game_GameMutator|traceCardResult"] = clsP.traceCardResult;
		d[ns + "cstrain_vuex_game_GameMutator|resume"] = clsP.resume;
		d[ns + "cstrain_vuex_game_GameMutator|showOrHideExpression"] = clsP.showOrHideExpression;
	}
};
var cstrain_vuex_game_GameState = function(rules) {
	this.showExpression = false;
	this.polynomial = null;
	this.cardResult = null;
	this.isPopup = false;
	this.delayTimeLeft = 0;
	this.topCard = null;
	this.cards = rules.getAllCards();
};
cstrain_vuex_game_GameState.__name__ = true;
var haxevx_vuex_core_IVxContext = function() { };
haxevx_vuex_core_IVxContext.__name__ = true;
var haxevx_vuex_core_IVxContext1 = function() { };
haxevx_vuex_core_IVxContext1.__name__ = true;
var haxevx_vuex_core_IVxStoreContext = function() { };
haxevx_vuex_core_IVxStoreContext.__name__ = true;
var haxevx_vuex_core_VxStore = function() {
	this.strict = false;
};
haxevx_vuex_core_VxStore.__name__ = true;
haxevx_vuex_core_VxStore.prototype = {
	dispatch: function(type,payload,opts) {
		return null;
	}
	,commit: function(type,payload,opts) {
	}
};
var cstrain_vuex_store_GameStore = function(rules) {
	haxevx_vuex_core_VxStore.call(this);
	this.state = new cstrain_vuex_store_GameStoreState();
	this.game = new cstrain_vuex_game_GameModule(rules);
	this._Init("");
};
cstrain_vuex_store_GameStore.__name__ = true;
cstrain_vuex_store_GameStore.__super__ = haxevx_vuex_core_VxStore;
cstrain_vuex_store_GameStore.prototype = $extend(haxevx_vuex_core_VxStore.prototype,{
	_Init: function(ns) {
		this._ = ns;
		haxevx_vuex_core_ModuleStack.stack.push(this);
		if(this.state != null) {
			this.state._ = ns;
		} else {
			this.state = { _ : ns};
		}
		var useNS = ns;
		var cls = cstrain_vuex_store_GameStore;
		var clsP = cls.prototype;
		var key;
		var d;
		d = { };
		this.modules = d;
		if(this.game != null) {
			d.game = this.game;
			this.game._Init(ns + "game/");
		}
	}
	,_InjNative: function(g) {
		this._stg = g;
	}
});
var cstrain_vuex_store_GameStoreState = function() {
};
cstrain_vuex_store_GameStoreState.__name__ = true;
var haxevx_vuex_core_IPayload = function() { };
haxevx_vuex_core_IPayload.__name__ = true;
var haxevx_vuex_core_IVxContext2 = function() { };
haxevx_vuex_core_IVxContext2.__name__ = true;
var haxevx_vuex_core_IVxContext3 = function() { };
haxevx_vuex_core_IVxContext3.__name__ = true;
var haxevx_vuex_core_IVxContext4 = function() { };
haxevx_vuex_core_IVxContext4.__name__ = true;
var haxevx_vuex_core_NoneT = function() { };
haxevx_vuex_core_NoneT.__name__ = true;
haxevx_vuex_core_NoneT.prototype = {
	toString: function() {
		return "NoneT";
	}
};
var haxevx_vuex_core_VxBoot = function() {
};
haxevx_vuex_core_VxBoot.__name__ = true;
haxevx_vuex_core_VxBoot.notifyStarted = function() {
};
haxevx_vuex_core_VxBoot.getRenderComponentMethod = function(nativeComp) {
	return function(h) {
		return h(nativeComp,null,null);
	};
};
haxevx_vuex_core_VxBoot.prototype = {
	startStore: function(storeParams) {
		if(this.STORE != null) {
			throw new js__$Boot_HaxeError("Vuex store already started! Only 1 store is allowed");
		}
		var metaFields;
		var md;
		var noNamespaceGetterProps;
		var store = new Vuex.Store(storeParams);
		var o;
		var storeGetters = store.getters;
		var stack = haxevx_vuex_core_ModuleStack.stack;
		var i = stack.length;
		while(--i > -1) stack[i]._InjNative(storeGetters);
		stack = [];
		if(storeParams.modules != null) {
			var _g = 0;
			o = storeParams.modules;
			var _g1 = Reflect.fields(o);
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				var m = Reflect.field(o,p);
				md = storeParams[p];
				store[p] = md;
			}
		}
		this.STORE = store;
		return store;
	}
	,startVueWithRootComponent: function(el,rootComponent) {
		var bootVueParams = { };
		bootVueParams.el = el;
		if(this.STORE != null) {
			bootVueParams["store"] = this.STORE;
		}
		bootVueParams.render = haxevx_vuex_core_VxBoot.getRenderComponentMethod(rootComponent);
		var vm = new Vue(bootVueParams);
		haxevx_vuex_core_VxBoot.notifyStarted();
		return vm;
	}
};
var haxevx_vuex_core_ModuleStack = function() { };
haxevx_vuex_core_ModuleStack.__name__ = true;
var haxevx_vuex_native_ActionContext = function() { };
haxevx_vuex_native_ActionContext.__name__ = true;
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
String.__name__ = true;
Array.__name__ = true;
cstrain_core_Card.OPERATOR_ADD = 0;
cstrain_core_Card.OPERATOR_SUBTRACT = 1;
cstrain_core_Card.OPERATOR_MULTIPLY = 2;
cstrain_core_Card.OPERATOR_DIVIDE = 3;
cstrain_core_Card.OPERATION_EQUAL = 4;
cstrain_core_Deck.SET_NUMBERS = 1;
cstrain_core_Deck.SET_VARIABLE = 2;
cstrain_core_Deck.MASK_SET_ALL = 3;
cstrain_core_Deck.NUM_1 = 1;
cstrain_core_Deck.NUM_2 = 2;
cstrain_core_Deck.NUM_3 = 4;
cstrain_core_Deck.NUM_4 = 8;
cstrain_core_Deck.NUM_5 = 16;
cstrain_core_Deck.NUM_6 = 32;
cstrain_core_Deck.NUM_7 = 64;
cstrain_core_Deck.NUM_8 = 128;
cstrain_core_Deck.NUM_9 = 256;
cstrain_core_Deck.NUM_10 = 512;
cstrain_core_Deck.MASK_NUMBER_ALL = 1023;
cstrain_core_Deck.MASK_NUMBER_ALL_EXCEPT_1 = 1022;
cstrain_core_Deck.MASK_NUMBER_EVEN = 682;
cstrain_core_Deck.MASK_NUMBER_ODD = 341;
cstrain_core_Deck.OP_ADD = 1;
cstrain_core_Deck.OP_SUBTRACT = 2;
cstrain_core_Deck.OP_MULTIPLY = 4;
cstrain_core_Deck.OP_DIVIDE = 8;
cstrain_core_Deck.MASK_OPERATOR_ALL = 15;
cstrain_vuex_components_GameView.Comp_CardView = "CardView";
haxevx_vuex_core_ModuleStack.stack = [];
Main.main();
})();
