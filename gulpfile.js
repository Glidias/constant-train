const gulp = require('gulp');
const postcss  = require('gulp-postcss');
const modules   = require('postcss-modules');
const autoprefixer  = require('autoprefixer');
const path  = require('path');
const fs  = require('fs');
const argv = require('yargs').argv;
const stringHash = require('string-hash');
const camelize = require('camelize');
const mkdirp = require('mkdirp');
const getDirName = require('path').dirname;
const sass = require('gulp-sass');
const rename = require('gulp-rename');
//const changedInPlace = require('gulp-changed-in-place');

const SRC_FOLDER_PREFIX = "src/";
const SRC_COMPONENT_STYLES =  "./"+SRC_FOLDER_PREFIX+"cstrain/vuex/components/**/*.{css,scss}";
const DEST_COMPONENTS = "./processing-modules";


// CSS module namespacing convention defined here

function getNamespacePrefixForFileName(filename){
	  filename = filename.split(".")[0];
	  filename = filename.split("\\").pop();
	  var hash = stringHash(filename).toString(36).substr(0, 5);
	  var moduleFileName = filename.split("_").pop();
	  var prefix = moduleFileName +"_" + hash + '_';
	  return prefix;
}
 

  // Delivering CSS modules approaches:

  /** APPROACH #1: 
* Given 2 parameters eg. "--src path/to/somefile.scss" and "--dest path/to/folder",  (conventionally "./processing-modules" folder for destination)
  compiles and delivers a single prefixed CSS module with matching src file extension and an accompanying JSON file. May be optionally executed by a Haxe build macro for each HaxeVx component class to deliver each CSS module.
*/
gulp.task('cssmodule', function() {
	var src = argv["src"];
	var dest = argv["dest"];
	
	function getJSONFromCssModules(cssFileName, json) {
	  const cssName       = path.basename(cssFileName, '.css');
	  const jsonFileName  = path.resolve(dest, `${ cssName.split(".")[0] }.json`);
		
	  json = camelize(json);
	  json["_ns"] = getNamespacePrefixForFileName(cssFileName);
	   mkdirp(getDirName(jsonFileName), function (err) {
		if (err) return cb(err);
		 fs.writeFileSync(jsonFileName, JSON.stringify(json));
	  });
	}
	
	return gulp.src(src)
    .pipe(postcss([
      modules({ 
		  getJSON: getJSONFromCssModules,
		  generateScopedName: function(name, filename, css) {
		
			  return getNamespacePrefixForFileName(filename) + name;
		  }
			
	  }),
	  
    ]))
	.pipe(gulp.dest(dest));
});


/** APPROACH #2  (note: per-file change detection not working..)
* Seperate process to detect (en-masse) for specific ./src folder styling changes over css/scss files (in this case, ./src/cstrain/vuex/components)  and delivers respective modules' prefixed-style files and JSON to ./processing-modules reference folder. Folder may be gulp-watched for any src changes which will execute this.
*/
gulp.task("cssmodules:src", function() {
	
	var dest = DEST_COMPONENTS;
	
	function getJSONFromCssModules(cssFileName, json) {
	  const cssName       = path.basename(cssFileName, '.css');
	  
	  const jsonFileName  = path.resolve(dest, `${ cssName.split(".")[0] }.json`);
		
	  json = camelize(json);
	  json["_ns"] = getNamespacePrefixForFileName(cssFileName);
	   mkdirp(getDirName(jsonFileName), function (err) {
		if (err) return cb(err);
		 fs.writeFileSync(jsonFileName, JSON.stringify(json));
	  });
	}

	return gulp.src(SRC_COMPONENT_STYLES, { base: process.cwd()+"/"+SRC_FOLDER_PREFIX })
	//.pipe( changedInPlace( {howToDetermineDifference: "modification-time", firstPass:false} ) )
	.pipe(rename(function (path) {
		//console.log(path.dirname);
		// normalize to forward slashses
		var dirName = path.dirname.split("\\").join("/");
		path.dirname = "";
		path.basename = "_"+ dirName.split("/").join("_") + "_"+path.basename;
	}))
    .pipe(postcss([
      modules({ 
		  getJSON: getJSONFromCssModules,
		  generateScopedName: function(name, filename, css) {
		
			  return getNamespacePrefixForFileName(filename) + name;
		  }
	  }),
	  
    ]))
	.pipe(gulp.dest(dest));
});


// Compiling CSS bundle

/** This task can be executed via the .hxml files or through gulpcss.bat (which should be executed only AFTER compiling haxe codebase).
* Automatically compiles and deploys ./scss/index.scss to ./bin/css/index.css bundle. 
* It is assumed index.scss will reference any needed CSS module imports at 
*  "processing-modules/_exports.scss", which is generated by Haxe codebase after compiling Haxe.
*/
gulp.task("css", function() {
	 return gulp.src('./scss/index.scss')
    .pipe(sass().on('error', sass.logError))
    .pipe(gulp.dest('./bin/css'));
});